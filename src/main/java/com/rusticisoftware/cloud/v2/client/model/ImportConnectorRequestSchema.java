/*
 * SCORM Cloud Rest API
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rusticisoftware.cloud.v2.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Used to create a course from a content connector. Before creating a course using this schema, a content connector must be created using the &#x60;/contentConnectors&#x60; API endpoints. Once a content connector has been created, this schema can be used to create a course that can be launched using that connector.  For example, this schema is used to import an LTI 1.3 Tool to be consumed by SCORM Cloud acting as the LTI Platform. 
 */
@ApiModel(description = "Used to create a course from a content connector. Before creating a course using this schema, a content connector must be created using the `/contentConnectors` API endpoints. Once a content connector has been created, this schema can be used to create a course that can be launched using that connector.  For example, this schema is used to import an LTI 1.3 Tool to be consumed by SCORM Cloud acting as the LTI Platform. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-09-22T15:00:21.693-05:00")
public class ImportConnectorRequestSchema {
  @JsonProperty("connectorId")
  private String connectorId = null;

  @JsonProperty("connectorIdForContent")
  private String connectorIdForContent = null;

  @JsonProperty("metadataForConnector")
  private Object metadataForConnector = null;

  public ImportConnectorRequestSchema connectorId(String connectorId) {
    this.connectorId = connectorId;
    return this;
  }

  /**
   * The connector to use for this course
   * @return connectorId
  **/
  @ApiModelProperty(value = "The connector to use for this course")
  public String getConnectorId() {
    return connectorId;
  }

  public void setConnectorId(String connectorId) {
    this.connectorId = connectorId;
  }

  public ImportConnectorRequestSchema connectorIdForContent(String connectorIdForContent) {
    this.connectorIdForContent = connectorIdForContent;
    return this;
  }

  /**
   * The id the connector provides to identify this content
   * @return connectorIdForContent
  **/
  @ApiModelProperty(value = "The id the connector provides to identify this content")
  public String getConnectorIdForContent() {
    return connectorIdForContent;
  }

  public void setConnectorIdForContent(String connectorIdForContent) {
    this.connectorIdForContent = connectorIdForContent;
  }

  public ImportConnectorRequestSchema metadataForConnector(Object metadataForConnector) {
    this.metadataForConnector = metadataForConnector;
    return this;
  }

  /**
   * The metadata for this connector, format is implementation specific
   * @return metadataForConnector
  **/
  @ApiModelProperty(value = "The metadata for this connector, format is implementation specific")
  public Object getMetadataForConnector() {
    return metadataForConnector;
  }

  public void setMetadataForConnector(Object metadataForConnector) {
    this.metadataForConnector = metadataForConnector;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportConnectorRequestSchema importConnectorRequestSchema = (ImportConnectorRequestSchema) o;
    return Objects.equals(this.connectorId, importConnectorRequestSchema.connectorId) &&
        Objects.equals(this.connectorIdForContent, importConnectorRequestSchema.connectorIdForContent) &&
        Objects.equals(this.metadataForConnector, importConnectorRequestSchema.metadataForConnector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorId, connectorIdForContent, metadataForConnector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportConnectorRequestSchema {\n");
    
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    connectorIdForContent: ").append(toIndentedString(connectorIdForContent)).append("\n");
    sb.append("    metadataForConnector: ").append(toIndentedString(metadataForConnector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

