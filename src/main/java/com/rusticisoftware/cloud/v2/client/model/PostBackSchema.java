/**
 * SCORM Cloud Rest API
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.rusticisoftware.cloud.v2.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * PostBackSchema
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-25T23:15:50.683-05:00")
public class PostBackSchema   {
  @JsonProperty("url")
  private String url = null;

  /**
   * Optional parameter to specify how to authorize against the given postbackurl, can be 'form' or 'httpbasic'. If form authentication, the username and password for authentication are submitted as form fields 'username' and 'password', and the registration data as the form field 'data'. If httpbasic authentication is used, the username and password are placed in the standard Authorization HTTP header, and the registration data is the body of the message (sent as text/xml content type). This field is set to 'form' by default.
   */
  public enum AuthTypeEnum {
    UNDEFINED("UNDEFINED"),
    
    FORM("FORM"),
    
    HTTPBASIC("HTTPBASIC");

    private String value;

    AuthTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AuthTypeEnum fromValue(String text) {
      for (AuthTypeEnum b : AuthTypeEnum.values()) {
          if (String.valueOf(b.value).equals(text)) {
              return b;
          }
      }
      return null;
    }
  }

  @JsonProperty("authType")
  private AuthTypeEnum authType = AuthTypeEnum.UNDEFINED;

  @JsonProperty("userName")
  private String userName = null;

  @JsonProperty("password")
  private String password = null;

  /**
   * This parameter allows you to specify a level of detail in the information that is posted back while the course is being taken. It may be one of three values: 'course' (course summary), 'activity' (activity summary, or 'full' (full detail), and is set to 'course' by default. The information will be posted as xml, and the format of that xml is specified below under the method 'getRegistrationResult'
   */
  public enum ResultsFormatEnum {
    COURSE("COURSE"),
    
    ACTIVITY("ACTIVITY"),
    
    FULL("FULL");

    private String value;

    ResultsFormatEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResultsFormatEnum fromValue(String text) {
      for (ResultsFormatEnum b : ResultsFormatEnum.values()) {
          if (String.valueOf(b.value).equals(text)) {
              return b;
          }
      }
      return null;
    }
  }

  @JsonProperty("resultsFormat")
  private ResultsFormatEnum resultsFormat = ResultsFormatEnum.COURSE;

  public PostBackSchema url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public PostBackSchema authType(AuthTypeEnum authType) {
    this.authType = authType;
    return this;
  }

   /**
   * Optional parameter to specify how to authorize against the given postbackurl, can be 'form' or 'httpbasic'. If form authentication, the username and password for authentication are submitted as form fields 'username' and 'password', and the registration data as the form field 'data'. If httpbasic authentication is used, the username and password are placed in the standard Authorization HTTP header, and the registration data is the body of the message (sent as text/xml content type). This field is set to 'form' by default.
   * @return authType
  **/
  @ApiModelProperty(example = "null", value = "Optional parameter to specify how to authorize against the given postbackurl, can be 'form' or 'httpbasic'. If form authentication, the username and password for authentication are submitted as form fields 'username' and 'password', and the registration data as the form field 'data'. If httpbasic authentication is used, the username and password are placed in the standard Authorization HTTP header, and the registration data is the body of the message (sent as text/xml content type). This field is set to 'form' by default.")
  public AuthTypeEnum getAuthType() {
    return authType;
  }

  public void setAuthType(AuthTypeEnum authType) {
    this.authType = authType;
  }

  public PostBackSchema userName(String userName) {
    this.userName = userName;
    return this;
  }

   /**
   * The user name to be used in authorizing the postback of data to the URL specified by postback url.
   * @return userName
  **/
  @ApiModelProperty(example = "null", value = "The user name to be used in authorizing the postback of data to the URL specified by postback url.")
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }

  public PostBackSchema password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The password to be used in authorizing the postback of data to the URL specified by postback url.
   * @return password
  **/
  @ApiModelProperty(example = "null", value = "The password to be used in authorizing the postback of data to the URL specified by postback url.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public PostBackSchema resultsFormat(ResultsFormatEnum resultsFormat) {
    this.resultsFormat = resultsFormat;
    return this;
  }

   /**
   * This parameter allows you to specify a level of detail in the information that is posted back while the course is being taken. It may be one of three values: 'course' (course summary), 'activity' (activity summary, or 'full' (full detail), and is set to 'course' by default. The information will be posted as xml, and the format of that xml is specified below under the method 'getRegistrationResult'
   * @return resultsFormat
  **/
  @ApiModelProperty(example = "null", value = "This parameter allows you to specify a level of detail in the information that is posted back while the course is being taken. It may be one of three values: 'course' (course summary), 'activity' (activity summary, or 'full' (full detail), and is set to 'course' by default. The information will be posted as xml, and the format of that xml is specified below under the method 'getRegistrationResult'")
  public ResultsFormatEnum getResultsFormat() {
    return resultsFormat;
  }

  public void setResultsFormat(ResultsFormatEnum resultsFormat) {
    this.resultsFormat = resultsFormat;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostBackSchema postBackSchema = (PostBackSchema) o;
    return Objects.equals(this.url, postBackSchema.url) &&
        Objects.equals(this.authType, postBackSchema.authType) &&
        Objects.equals(this.userName, postBackSchema.userName) &&
        Objects.equals(this.password, postBackSchema.password) &&
        Objects.equals(this.resultsFormat, postBackSchema.resultsFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, authType, userName, password, resultsFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostBackSchema {\n");
    
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    resultsFormat: ").append(toIndentedString(resultsFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

